{
  "swagger": "2.0",
  "info": {
    "title": "Upcloud api",
    "description": "The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.",
    "version": "1.2.0"
  },
  "basePath": "/1.2",
  "tags": [
    {
      "name": "Account",
      "description": "An API user account and password is required to access the UpCloud API. The API user is associated with an UpCloud account. A user account may have multiple API users to be used in different client software. In order to use resources from the cloud, the account must have enough credits."
    },
    {
      "name": "Prices",
      "description": "UpCloud resources are billed by the hour according to the price list. We also offer pricing plans for fixed server configurations."
    },
    {
      "name": "Zone",
      "description": "A zone identifies the physical site where the cloud services are located. Different zones may be used to provide geographical and logical separation of servers."
    },
    {
      "name": "Timezone",
      "description": "A cloud server's hardware clock is set to a specific timezone. Some operating systems, such as Microsoft Windows, rely on the hardware clock being in local time. Others, such as Linux, use a default setting of a hardware clock in Coordinated Universal Time (UTC). The server's timezone setting can be adjusted to a local time if required by the operating system."
    },
    {
      "name": "Plan",
      "description": "Server plans are preconfigured server configurations with fixed price. Each plan includes certain number of CPU cores, memory amount, storage and transfer quota in addition of one public IPv4 address (private IPv4 addresses and public IPv6 addresses are currently free of charge, so they are not included in plan)."
    },
    {
      "name": "Server",
      "description": "The server configuration defines which storage devices the server is attached to, which IP addresses can be used and how the server can be reached for remote management. A server must have at least one storage device attached in order to be started. Servers may have from zero to five public IPv4 and IPv6 addresses. All servers have a private IP address that cannot be removed."
    },
    {
      "name": "Storage",
      "description": "A storage device is a block device similar to a physical hard disk. It can be used to install an operating system or hold some other filesystem for a server."
    },
    {
      "name": "IP Address",
      "description": "The UpCloud network has public and private IP addresses.\n\nPublic IP addresses are used to connect to the server from the Internet. Private addresses are only visible to servers under the same UpCloud account. A server has a minimum of one and a maximum of five public IPv4 and IPv6 addresses. Every server can have one private IPv4 address only. The UpCloud API assigns the IP addresses automatically. IP addresses cannot be reserved for later use.\n\nThe operating system running on the server will see a separate network interface per IP address. On a typical server, there are three network interfaces. The first network interface is assigned to the public network and the second to a private network. If the server has an IPv6 address configured it will use the third network interface. DHCP service is provided on all IPv4 network interfaces for automatic configuration of the correct IP address. IPv6 network interfaces should use stateless address autoconfiguration (SLAAC) with IPv6 privacy extensions disabled. On IPv6-only server DNS parameters can be obtained with stateless DHCPv6."
    },
    {
      "name": "Firewall",
      "description": "Each server has its own firewall rules. The firewall is enabled on all network interfaces."
    },
    {
      "name": "Tag",
      "description": "User can define a set of free-form tags to group and identify a subset of their servers. Tags can be for example webserver, database, PROD, QA, DEV etc."
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Account information",
        "description": "Returns information on the user's account.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/price": {
      "get": {
        "tags": [
          "Prices"
        ],
        "summary": "List prices",
        "description": "Returns a list resource prices.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "price": {
                  "type": "object",
                  "properties": {
                    "zone": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/PriceZone"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/zone": {
      "get": {
        "tags": [
          "Zone"
        ],
        "summary": "List available zones",
        "description": "Returns a list of available zones.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "zones": {
                  "type": "object",
                  "properties": {
                    "zone": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/Zone"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timezone": {
      "get": {
        "tags": [
          "Timezone"
        ],
        "summary": "List timezones",
        "description": "Returns a list of available timezones. Timezones are used to set the hardware clock for servers.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "schema": {
              "type": "object",
              "properties": {
                "timezones": {
                  "type": "object",
                  "properties": {
                    "timezone": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Timezone"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plan": {
      "get": {
        "tags": [
          "Plan"
        ],
        "summary": "List available plans",
        "description": "Returns a list of available plans.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "plans": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Plan"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/server_size": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "List server configurations",
        "description": "Returns a list of available server configurations. A server configuration consists of a combination of CPU core count and main memory amount. All servers are created using these configurations.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server_sizes": {
                  "type": "object",
                  "properties": {
                    "server_size": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ServerSize"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/server": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "List of servers",
        "description": "Returns a list of all servers associated with the current account.",
        "operationId": "list servers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "servers": {
                  "type": "object",
                  "properties": {
                    "server": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Server"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create server",
        "description": "Creates a new server instance.",
        "operationId": "create server",
        "tags": [
          "Server"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Server",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Server"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "title": "Server list response",
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}": {
      "get": {
        "summary": "Get server details",
        "description": "Returns detailed information about a specific server.",
        "operationId": "server details",
        "tags": [
          "Server"
        ],
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "description": "Id of server to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify server",
        "operationId": "update server",
        "tags": [
          "Server"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "description": "Id of server to modify",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Server",
            "in": "body",
            "schema": {
              "title": "Success server update response",
              "$ref": "#/definitions/Server"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "title": "Success server create response",
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete server",
        "operationId": "delete server",
        "tags": [
          "Server"
        ],
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "description": "Id of server to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/start": {
      "post": {
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "description": "Id of server to start",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "tags": [
          "Server"
        ],
        "summary": "Start server",
        "description": "Starts a stopped server. The server state must be `stopped`.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/stop": {
      "post": {
        "tags": [
          "Server"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "description": "Id of server to stop",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stop_server",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "stop_type": {
                  "description": "Type of stop operation performed on the server.",
                  "type": "string",
                  "enum": [
                    "soft",
                    "hard"
                  ],
                  "default": "soft",
                  "example": "soft"
                },
                "timeout": {
                  "description": "The stop timeout in seconds.",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 600,
                  "example": 60
                }
              }
            }
          }
        ],
        "summary": "Stop server",
        "description": "Stops a started server. The server state must be `started`.",
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/restart": {
      "post": {
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "description": "Id of server to restart",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "restart_server",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "stop_type": {
                  "description": "Restart type",
                  "type": "string",
                  "enum": [
                    "soft",
                    "hard"
                  ],
                  "default": "soft",
                  "example": "soft"
                },
                "timeout": {
                  "description": "Stop timeout in seconds",
                  "type": "number",
                  "example": "60",
                  "minimum": 1,
                  "maximum": 600
                },
                "timeout_action": {
                  "description": "Action to take if timeout limit is exceeded.",
                  "type": "string",
                  "enum": [
                    "destroy",
                    "ignore"
                  ],
                  "example": "destroy"
                }
              }
            }
          }
        ],
        "tags": [
          "Server"
        ],
        "summary": "Restart server",
        "description": "Stops and starts a server. The server state must be `started`.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "List of storages",
        "operationId": "list storages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "title": "Success storages response",
              "properties": {
                "storages": {
                  "type": "object",
                  "properties": {
                    "storage": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Storage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Create storage",
        "description": "Creates a new storage resource.",
        "parameters": [
          {
            "name": "storage",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "size": {
                  "type": "number",
                  "minimum": 10,
                  "maximum": 1024,
                  "description": "The size of the storage in gigabytes.",
                  "example": 10
                },
                "tier": {
                  "$ref": "#/definitions/StorageTier",
                  "example": "maxiops"
                },
                "title": {
                  "type": "string",
                  "maxItems": 64,
                  "description": "A short description.",
                  "example": "My data collection"
                },
                "zone": {
                  "type": "string",
                  "default": "The zone in which the storage will be created, e.g. fi-hel1. See Zones.",
                  "example": "fi-hel1"
                },
                "backup_rule": {
                  "$ref": "#/definitions/BackupRule"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "$ref": "#/definitions/Storage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{type}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Type",
            "type": "string",
            "enum": [
              "public",
              "private",
              "normal",
              "backup",
              "cdrom",
              "template",
              "favorite"
            ],
            "required": true,
            "description": "Storage's access type (`public` or `private`) or storage type (`normal`, `backup`, `cdrom` or `template`) or `favorite` status"
          }
        ],
        "summary": "List of storages by type",
        "operationId": "list storages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "title": "Success storages response",
              "properties": {
                "storages": {
                  "type": "object",
                  "properties": {
                    "storage": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Storage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/{storageId}": {
      "parameters": [
        {
          "name": "storageId",
          "in": "path",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ],
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage details",
        "description": "Returns detailed information about a specific storage resource.",
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "$ref": "#/definitions/Storage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Storage"
        ],
        "summary": "Modify storage",
        "description": "Modifies an existing storage resource. This operation is used to rename or resize the storage.",
        "parameters": [
          {
            "name": "storage",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "backup_rule": {
                  "$ref": "#/definitions/BackupRule"
                },
                "size": {
                  "type": "number",
                  "minimum": 10,
                  "maximum": 1024,
                  "example": 10
                },
                "title": {
                  "type": "string",
                  "maxLength": 64,
                  "example": "A larger storage"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "$ref": "#/definitions/Storage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Storage"
        ],
        "summary": "Delete storage",
        "description": "Deleted an existing storage resource.",
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/storage/attach": {
      "parameters": [
        {
          "name": "serverId",
          "in": "path",
          "description": "Server id",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ],
      "post": {
        "tags": [
          "Server",
          "Storage"
        ],
        "summary": "Attach storage",
        "description": "Attaches a storage as a device to a server.",
        "parameters": [
          {
            "name": "storage_device",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Storage device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/storage/detach": {
      "parameters": [
        {
          "name": "serverId",
          "description": "Server id",
          "in": "path",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ],
      "post": {
        "tags": [
          "Server",
          "Storage"
        ],
        "summary": "Detach storage",
        "description": "Detaches a storage resource from a server.",
        "parameters": [
          {
            "name": "storage_device",
            "required": true,
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Detach the storage attached to this address.",
                  "example": "scsi:0:0"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/storage/cdrom/load": {
      "parameters": [
        {
          "name": "serverId",
          "description": "Server id",
          "in": "path",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ],
      "post": {
        "tags": [
          "Server",
          "Storage"
        ],
        "summary": "Load CD-ROM",
        "description": "Loads a storage as a CD-ROM in the CD-ROM device of a server.",
        "parameters": [
          {
            "name": "storage_device",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the storage to be loaded in the CD-ROM device.",
                  "example": "01000000-0000-4000-8000-000060010101"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/storage/cdrom/eject": {
      "parameters": [
        {
          "name": "serverId",
          "description": "Server id",
          "type": "string",
          "format": "uuid",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Eject CD-ROM",
        "description": "Ejects the storage from the CD-ROM device of a server.",
        "tags": [
          "Server",
          "Storage"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "$ref": "#/definitions/Server"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{storageId}/clone": {
      "parameters": [
        {
          "name": "storageId",
          "description": "Storage id",
          "in": "path",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ],
      "post": {
        "summary": "Clone storage",
        "description": "Creates an exact copy of an existing storage resource.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "storage",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "zone": {
                  "type": "string",
                  "description": "The zone in which the storage will be created, e.g. fi-hel1. See Zones.",
                  "example": "fi-hel1"
                },
                "tier": {
                  "$ref": "#/definitions/StorageTier",
                  "example": "maxiops"
                },
                "title": {
                  "type": "string",
                  "maxLength": 64,
                  "description": "A short description.",
                  "example": "Clone of operating system disk"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "$ref": "#/definitions/Storage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{storageId}/cancel": {
      "parameters": [
        {
          "name": "storageId",
          "description": "Strage id",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Cancel storage operation",
        "description": "Cancels a running cloning operation and deletes the incomplete copy.",
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{storageId}/templatize": {
      "parameters": [
        {
          "name": "storageId",
          "description": "Storage id",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Templatize storage",
        "description": "Creates an exact copy of an existing storage resource which can be used as a template for creating new servers.",
        "parameters": [
          {
            "name": "storage",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "A short description.",
                  "example": "My server template",
                  "maxLength": 64
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "$ref": "#/definitions/Storage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{storageId}/backup": {
      "parameters": [
        {
          "name": "storageId",
          "description": "Storage id",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Create backup",
        "description": "Creates a point-in-time backup of a storage resource. For automatic, scheduled backups, see  `backup_rule` in Create storage or Modify storage.",
        "parameters": [
          {
            "name": "storage",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Manually created backup",
                  "description": "A short description."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "storage": {
                  "$ref": "#/definitions/Storage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{storageId}/restore": {
      "parameters": [
        {
          "name": "storageId",
          "description": "Storage id",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "post": {
        "summary": "Restore backup",
        "description": "Restores the origin storage with data from the specified backup storage.",
        "tags": [
          "Storage"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{storageId}/favorite": {
      "parameters": [
        {
          "name": "storageId",
          "description": "Storage id",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Add storage to favorites",
        "description": "Adds a storage to the list of favorite storages. To list favorite storages, see List storages. This operations succeeds even if the storage is already on the list of favorites.",
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Storage"
        ],
        "summary": "Remove storage from favorites",
        "description": "Delete a storage from the list of favorite storages. To list favorite storages, see List storages. This operations succeeds even if the storage is already on the list of favorites.",
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ip_address": {
      "get": {
        "tags": [
          "IP Address"
        ],
        "summary": "List IP addresses",
        "description": "Returns a list of all IP addresses assigned to servers on the current user account.",
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "ip_addresses": {
                  "type": "object",
                  "properties": {
                    "ip_address": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Ip address"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "IP Address"
        ],
        "summary": "Assign IP address",
        "description": "Assigns a new IP address to a server.",
        "parameters": [
          {
            "name": "ip_address",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "access": {
                  "type": "string",
                  "enum": [
                    "public",
                    "private"
                  ],
                  "description": "Is address for private or public network.",
                  "example": "public"
                },
                "family": {
                  "type": "string",
                  "example": "IPv4",
                  "enum": [
                    "IPv4",
                    "IPv6"
                  ],
                  "description": "The address family of new IP address."
                },
                "server": {
                  "type": "string",
                  "format": "uuid",
                  "example": "009d64ef-31d1-4684-a26b-c86c955cbf46",
                  "description": "Server id"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "ip_address": {
                  "$ref": "#/definitions/Ip address"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ip_address/{ip}": {
      "parameters": [
        {
          "name": "ip",
          "description": "Ip address",
          "in": "path",
          "required": true,
          "type": "string",
          "format": "IP"
        }
      ],
      "get": {
        "summary": "Get IP address details",
        "description": "Returns detailed information about a specific IP address.",
        "tags": [
          "IP Address"
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "ip_address": {
                  "$ref": "#/definitions/Ip address"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "IP Address"
        ],
        "summary": "Modify IP address",
        "description": "Modifies the reverse DNS PTR record corresponding to an IP address. The PTR record can only be set to public IP address.",
        "parameters": [
          {
            "name": "ip_address",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ptr_record": {
                  "type": "string",
                  "description": "A fully qualified domain name.",
                  "default": "",
                  "example": "hostname.example.com"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "ip_address": {
                  "$ref": "#/definitions/Ip address"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IP Address"
        ],
        "summary": "Release IP address",
        "description": "Removes an IP address from a server.",
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/firewall_rule": {
      "parameters": [
        {
          "name": "serverId",
          "description": "Server id",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Server",
          "Firewall"
        ],
        "summary": "List firewall rules",
        "description": "Returns a list of firewall rules for a specific server.",
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "firewall_rules": {
                  "type": "object",
                  "properties": {
                    "firewall_rule": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/FirewallRule"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Server",
          "Firewall"
        ],
        "summary": "Create firewall rule",
        "description": "Creates a new firewall rule",
        "parameters": [
          {
            "name": "firewall_rule",
            "schema": {
              "type": "object",
              "properties": {
                "firewall_rule": {
                  "$ref": "#/definitions/FirewallRule"
                }
              }
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/{serverId}/firewall_rule/{firewallRuleNumber}": {
      "parameters": [
        {
          "name": "serverId",
          "description": "Server id",
          "type": "string",
          "format": "uuid",
          "required": true,
          "in": "path"
        },
        {
          "name": "firewallRuleNumber",
          "description": "Denotes the index of the firewall rule in the server's firewall rule list",
          "type": "string",
          "in": "path",
          "format": "uuid",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Server",
          "Firewall"
        ],
        "summary": "Get firewall rule details",
        "description": "Returns detailed information about a specific firewall rule",
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "object",
              "properties": {
                "firewall_rule": {
                  "$ref": "#/definitions/FirewallRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Server",
          "Firewall"
        ],
        "summary": "Remove firewall rule",
        "description": "Removes a firewall rule from a server. Firewall rules must be removed individually. The positions of remaining firewall rules will be adjusted after a rule is removed.",
        "responses": {
          "204": {
            "description": "Normal response"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "An API user account and password is required to access the UpCloud API. The API user is associated with an UpCloud account. A user account may have multiple API users to be used in different client software. In order to use resources from the cloud, the account must have enough credits.",
      "type": "object",
      "properties": {
        "credits": {
          "type": "number",
          "example": "10000",
          "description": "Credits are used to pay for cloud resources such as servers, storages, network traffic and IP addresses. Credits are automatically deducted for used resources on an hourly basis. Should the user run out of credits, active resources will be disabled and reactivated after the credit balance returns to positive. Credits can be purchased from the UpCloud website."
        },
        "username": {
          "type": "string",
          "example": "username"
        }
      }
    },
    "Price": {
      "type": "object",
      "description": "UpCloud resources are billed by the hour according to the price list. We also offer pricing plans for fixed server configurations.",
      "properties": {
        "amount": {
          "type": "number",
          "example": 1
        },
        "price": {
          "type": "number",
          "example": 5
        }
      }
    },
    "PriceZone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "firewall": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "io_request_backup": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "io_request_hdd": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "io_request_maxiops": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "ipv4_address": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "ipv6_address": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "public_ipv4_bandwidth_in": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "public_ipv4_bandwidth_out": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "public_ipv6_bandwidth_in": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "public_ipv6_bandwidth_out": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "server_core": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "server_memory": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "storage_backup": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "storage_hdd": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "storage_maxiops": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "server_plan_1xCPU-1GB": {
          "type": "object",
          "$ref": "#/definitions/Price"
        },
        "server_plan_2xCPU-2GB": {
          "type": "object",
          "$ref": "#/definitions/Price"
        }
      }
    },
    "Zone": {
      "type": "object",
      "description": "A zone identifies the physical site where the cloud services are located. Different zones may be used to provide geographical and logical separation of servers.",
      "properties": {
        "name": {
          "type": "string",
          "example": "de-fra1"
        },
        "description": {
          "type": "string",
          "example": "Frankfurt #1"
        }
      }
    },
    "Timezone": {
      "type": "string",
      "description": "A cloud server's hardware clock is set to a specific timezone. Some operating systems, such as Microsoft Windows, rely on the hardware clock being in local time. Others, such as Linux, use a default setting of a hardware clock in Coordinated Universal Time (UTC). The server's timezone setting can be adjusted to a local time if required by the operating system.",
      "example": "Africa/Abidjan"
    },
    "Plan": {
      "type": "object",
      "description": "Server plans are preconfigured server configurations with fixed price. Each plan includes certain number of CPU cores, memory amount, storage and transfer quota in addition of one public IPv4 address (private IPv4 addresses and public IPv6 addresses are currently free of charge, so they are not included in plan).",
      "properties": {
        "core_number": {
          "type": "number",
          "example": 1
        },
        "memory_amount": {
          "type": "number",
          "example": 1024
        },
        "name": {
          "type": "string",
          "example": "1xCPU-1GB"
        },
        "public_traffic_out": {
          "type": "string",
          "example": 2048
        },
        "storage_size": {
          "type": "string",
          "example": 30
        },
        "storage_tier": {
          "type": "string",
          "example": "maxiops"
        }
      }
    },
    "ServerState": {
      "type": "string",
      "description": "The server state indicates the server's current status.",
      "enum": [
        "started",
        "stopped",
        "maintenance",
        "error"
      ],
      "example": "started"
    },
    "ServerSize": {
      "type": "object",
      "properties": {
        "core_number": {
          "type": "number",
          "example": "1"
        },
        "memory_amount": {
          "type": "number",
          "example": "512"
        }
      }
    },
    "Server": {
      "type": "object",
      "description": "The server configuration defines which storage devices the server is attached to, which IP addresses can be used and how the server can be reached for remote management. A server must have at least one storage device attached in order to be started. Servers may have from zero to five public IPv4 and IPv6 addresses. All servers have a private IP address that cannot be removed.",
      "properties": {
        "boot_order": {
          "type": "string",
          "enum": [
            "disk",
            "cdrom",
            "disk,cdrom",
            "cdrom,disk"
          ],
          "description": "The storage device boot order.",
          "example": "disk"
        },
        "core_number": {
          "description": "The number of CPU cores dedicated to the server. See List server configurations.",
          "type": "number",
          "example": 0
        },
        "firewall": {
          "description": "The state of the server firewall rules.",
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "default": "on",
          "example": "on"
        },
        "host": {
          "type": "number",
          "example": 7653311107
        },
        "hostname": {
          "description": "A valid hostname, e.g. host.example.com. The maximum length is 128 characters.",
          "type": "string",
          "example": "server1.example.com"
        },
        "ip_addresses": {
          "type": "object",
          "properties": {
            "ip_address": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ip address"
              }
            }
          }
        },
        "license": {
          "type": "number",
          "example": 0
        },
        "memory_amount": {
          "description": "The amount of main memory in megabytes. See List server configurations.",
          "type": "number",
          "example": 1024
        },
        "nic_model": {
          "description": "The model of the server's network interfaces.",
          "type": "string",
          "example": "virtio",
          "default": "e1000"
        },
        "plan": {
          "description": "The pricing plan used. If a plan is selected, the core_number and  memory_amount must match the plan if they are present.",
          "type": "string",
          "example": "1xCPU-1GB",
          "default": "custom"
        },
        "plan_ipv4_bytes": {
          "type": "number",
          "example": 3565675343
        },
        "plan_ipv6_bytes": {
          "type": "number",
          "example": 4534432
        },
        "state": {
          "$ref": "#/definitions/ServerState"
        },
        "storage_devices": {
          "type": "object",
          "properties": {
            "storage_device": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Storage device"
              }
            }
          }
        },
        "tags": {
          "type": "object",
          "properties": {
            "tag": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "DEV",
                "Ubuntu"
              ]
            }
          }
        },
        "timezone": {
          "description": "A timezone identifier, e.g. Europe/Helsinki. See Timezones.",
          "$ref": "#/definitions/Timezone"
        },
        "title": {
          "description": "A short description.",
          "type": "string",
          "example": "server1.example.com"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "0077fa3d-32db-4b09-9f5f-30d9e9afb565"
        },
        "video_model": {
          "description": "The model of the server's video interface.",
          "type": "string",
          "example": "cirrus",
          "enum": [
            "vga",
            "cirrus"
          ],
          "default": "vga"
        },
        "vnc": {
          "description": "The state of the VNC remote access service.",
          "type": "string",
          "enum": [
            "on",
            "off"
          ],
          "example": "on",
          "default": "off"
        },
        "vnc_host": {
          "type": "string",
          "example": "fi-he1l.vnc.upcloud.com"
        },
        "vnc_password": {
          "description": "The VNC remote access password.",
          "type": "string",
          "example": "aabbccdd"
        },
        "vnc_port": {
          "type": "string",
          "example": "00000"
        },
        "zone": {
          "type": "string",
          "example": "fi-hel1"
        }
      }
    },
    "BackupRule": {
      "type": "object",
      "description": "The backup_rule block defines when the storage device is backed up automatically.",
      "properties": {
        "interval": {
          "type": "string",
          "enum": [
            "daily",
            "mon",
            "tue",
            "wed",
            "thu",
            "fri",
            "sat",
            "sun"
          ],
          "example": "daily"
        },
        "time": {
          "example": "0430"
        },
        "retention": {
          "type": "number",
          "example": 365
        }
      }
    },
    "StorageType": {
      "type": "string",
      "enum": [
        "disk",
        "cdrom",
        "template",
        "backup"
      ],
      "example": "normal",
      "description": "There are four different storage types:\n* `disk` (*Normal storages*) - Normal storage resources are used to store operating system and application data. This is the only user writeable storage type.\n* `cdrom` (*CD-ROMs*) - CD-ROM resources are used as a read-only media, typically for server installations or crash recovery.\n* `template` (*Templates*) - Templates are special storage resources which are used to create new servers with a preconfigured operating system.\n* `backup` (*Backups*) - Backups are storages containing a point-in-time backup of a normal storage. Data on a normal storage can be restored from one of its backups. Backups can also be cloned to create a new normal storage resource. Backups can be created manually or automatically using backup rules."
    },
    "StorageTier": {
      "type": "string",
      "enum": [
        "hdd",
        "maxiops"
      ],
      "example": "maxiops",
      "description": "Storage resources are divided into two tiers:\n* `hdd` (*HDD storages*) - Data is stored on hard disks resulting in lower costs than MaxIOPS.\n* `maxiops` (*MaxIOPS storages*) - Data is stored on MaxIOPS storage arrays resulting in highest throughput and lowest response times.\n\nStorage tiers affect both the performance and price of the storage."
    },
    "StorageAccessType": {
      "type": "string",
      "enum": [
        "public",
        "private"
      ],
      "example": "private",
      "description": "Storage access types.\n* `public` (*Public storages*) are visible to all users. Public storages include CD-ROM images and templates. CD-ROM images can be used to install operating systems and to rescue unbootable systems. Templates are used to create servers with a preconfigured operating system.\n* `private` (*Private storages*) - visible only to the specific user account and sub-accounts. Users can only create private storages."
    },
    "StorageState": {
      "type": "string",
      "enum": [
        "online",
        "maintenance",
        "cloning",
        "backuping",
        "error"
      ],
      "example": "online",
      "description": "The storage state indicates the storage's current status.\n* `online` - The storage resource is ready for use. The storage can be attached or detached.\n* `maintenance` - Maintenance work is currently performed on the storage. The storage may have been newly created or it is being updated by some API operation.\n* `cloning` - The storage resource is currently the clone source for another storage.\n* `backuping` - The storage resource is currently being backed up to another storage.\n* `error` - The storage has encountered an error and is currently inaccessible."
    },
    "Storage": {
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/StorageAccessType"
        },
        "backup_rule": {
          "$ref": "#/definitions/BackupRule"
        },
        "backups": {
          "type": "object",
          "properties": {
            "backup": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "license": {
          "type": "number",
          "example": 0
        },
        "servers": {
          "type": "object",
          "properties": {
            "server": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid",
                "example": "00798b85-efdc-41ca-8021-f6ef457b8531"
              }
            }
          }
        },
        "size": {
          "type": "number",
          "example": 10
        },
        "state": {
          "$ref": "#/definitions/StorageState"
        },
        "tier": {
          "$ref": "#/definitions/StorageTier"
        },
        "title": {
          "type": "string",
          "example": "Operating system disk"
        },
        "type": {
          "$ref": "#/definitions/StorageType"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "01d4fcd4-e446-433b-8a9c-551a1284952e"
        },
        "zone": {
          "type": "string",
          "example": "fi-hel1"
        }
      }
    },
    "Storage device": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "example": "virtio:0"
        },
        "part_of_plan": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "example": "yes"
        },
        "storage": {
          "type": "string",
          "example": "012580a1-32a1-466e-a323-689ca16f2d43"
        },
        "storage_size": {
          "type": "number",
          "example": 20
        },
        "storage_title": {
          "type": "string",
          "example": "Storage for server1.example.com"
        },
        "type": {
          "type": "string",
          "example": "disk"
        }
      }
    },
    "AddressFamily": {
      "type": "string",
      "enum": [
        "IPv4",
        "IPv6"
      ],
      "example": "IPv4"
    },
    "Ip address": {
      "type": "object",
      "description": "The UpCloud network has public and private IP addresses.",
      "properties": {
        "access": {
          "type": "string",
          "enum": [
            "public",
            "private"
          ],
          "example": "private",
          "description": "Is address for private or public network."
        },
        "address": {
          "type": "string",
          "example": "10.0.0.00"
        },
        "family": {
          "type": "string",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "example": "IPv4",
          "description": "The address family of new IP address."
        },
        "ptr_record": {
          "type": "string",
          "example": "x.x.x.x.zone.host.upcloud.com"
        },
        "server": {
          "type": "string",
          "format": "uuid",
          "example": "0053cd80-5945-4105-9081-11192806a8f7"
        },
        "part_of_plan": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "example": "yes"
        }
      }
    },
    "FirewallRule": {
      "type": "object",
      "required": [
        "direction",
        "action",
        "family"
      ],
      "properties": {
        "direction": {
          "type": "string",
          "enum": [
            "in",
            "out"
          ],
          "description": "The direction of network traffic this rule will be applied to.",
          "example": "in"
        },
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "reject",
            "drop"
          ],
          "description": "Action to take if the rule conditions are met.",
          "example": "accept"
        },
        "position": {
          "type": "number",
          "minimum": 1,
          "maximum": 1000,
          "description": "Add the firewall rule to this position in the server's firewall list.",
          "example": "1"
        },
        "family": {
          "$ref": "#/definitions/AddressFamily",
          "description": "if protocol is set The address family of new firewall rule",
          "example": "IPv4"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "tcp",
            "udp",
            "icmp"
          ],
          "description": "The protocol this rule will be applied to.",
          "example": "tcp"
        },
        "icmp_type": {
          "type": "number",
          "minimum": 0,
          "maximum": 255,
          "description": "The ICMP type.",
          "example": ""
        },
        "destination_address_start": {
          "type": "string",
          "format": "IP",
          "description": "The destination address range starts from this address.",
          "example": ""
        },
        "destination_address_end": {
          "type": "string",
          "format": "IP",
          "description": "The destination address range ends to this address.",
          "example": ""
        },
        "destination_port_start": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "description": "The destination port range starts from this port number.",
          "example": 80
        },
        "destination_port_end": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "description": "The destination port range ends to this port number.",
          "example": 80
        },
        "source_address_start": {
          "type": "string",
          "format": "IP",
          "description": "The source address range starts from this address.",
          "example": "192.168.1.1"
        },
        "source_address_end": {
          "type": "string",
          "format": "IP",
          "description": "The source address range ends to this address.",
          "example": "192.168.1.255"
        },
        "source_port_start": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "description": "The source port range starts from this port number.",
          "example": ""
        },
        "source_port_end": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "description": "The source port range ends to this port number.",
          "example": ""
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "description": "Freeform comment string for the rule.",
          "example": "Allow SSH from this network"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32,
          "description": "The new tag",
          "example": "DEV"
        },
        "description": {
          "type": "string",
          "maxLength": 255,
          "description": "Description of the tag",
          "example": "Development servers"
        },
        "servers": {
          "type": "object",
          "description": "List of valid UUIDs of existing `servers` to be tagged",
          "properties": {
            "server": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid",
                "example": "0077fa3d-32db-4b09-9f5f-30d9e9afb565"
              }
            }
          }
        }
      }
    },
    "ErrorStatus": {
      "type": "number",
      "enum": [
        400,
        402,
        403,
        404,
        409
      ]
    },
    "ErrorCode": {
      "type": "string",
      "enum": [
        "ACTION_INVALID",
        "ACTION_MISSING",
        "BOOT_ORDER_INVALID",
        "CORE_MEMORY_UNSUPPORTED",
        "FIREWALL_INVALID",
        "CORE_NUMBER_INVALID",
        "HOSTNAME_INVALID",
        "HOSTNAME_MISSING",
        "MEMORY_AMOUNT_INVALID",
        "NIC_MODEL_INVALID",
        "PASSWORD_DELIVERY_INVALID",
        "SERVER_TITLE_INVALID",
        "SERVER_TITLE_MISSING",
        "SIZE_INVALID",
        "SIZE_MISSING",
        "STORAGE_DEVICE_INVALID",
        "STORAGE_DEVICE_MISSING",
        "STORAGE_DEVICES_INVALID",
        "STORAGE_DEVICES_MISSING",
        "STORAGE_INVALID",
        "STORAGE_MISSING",
        "STORAGE_TITLE_INVALID",
        "STORAGE_TITLE_MISSING",
        "TIMEZONE_INVALID",
        "TYPE_INVALID",
        "TIER_INVALID",
        "VIDEO_MODEL_INVALID",
        "VNC_INVALID",
        "VNC_PASSWORD_INVALID",
        "ZONE_INVALID",
        "ZONE_MISSING",
        "USER_DATA_INVALID",
        "INSUFFICIENT_CREDITS",
        "STORAGE_FORBIDDEN",
        "PLAN_CORE_NUMBER_ILLEGAL",
        "PLAN_MEMORY_AMOUNT_ILLEGAL",
        "TRIAL_PLAN",
        "STORAGE_NOT_FOUND",
        "ZONE_NOT_FOUND",
        "CDROM_DEVICE_IN_USE",
        "DEVICE_ADDRESS_IN_USE",
        "IP_ADDRESS_RESOURCES_UNAVAILABLE",
        "MULTIPLE_TEMPLATES",
        "PUBLIC_STORAGE_ATTACH",
        "SERVER_RESOURCES_UNAVAILABLE",
        "STORAGE_ATTACHED_AS_CDROM",
        "STORAGE_ATTACHED_AS_DISK",
        "STORAGE_DEVICE_LIMIT_REACHED",
        "STORAGE_IN_USE",
        "STORAGE_RESOURCES_UNAVAILABLE",
        "STORAGE_STATE_ILLEGAL",
        "STORAGE_TYPE_ILLEGAL",
        "ZONE_MISMATCH",
        "INVALID_USERNAME"
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": {
              "$ref": "#/definitions/ErrorCode"
            },
            "status": {
              "$ref": "#/definitions/ErrorStatus"
            }
          }
        }
      }
    }
  }
}